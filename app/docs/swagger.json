{
    "swagger": "2.0",
    "info": {
        "title": "Sipitha API documentation",
        "description": "This page describes the REST API of Sipitha",
        "version": "0.1.0"
    },
    "produces": [
        "application/json"
    ],
    "host": "localhost:8000",
    "paths": {
        "/createUser": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Root path that sends you to index",
                "description": "",
                "operationId": "rootPost",
                "parameters": [
                    {
                        "in": "body",
                        "name": "User",
                        "description": "The User JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Made a new User"
                    }
                }
            }
        },
        "/getUsers": {
            "get": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Returns a list of every user in the database.",
                "description": "",
                "operationId": "user",
                "responses": {
                    "200": {
                        "description": "Sends the list of every user in the database."
                    }
                }
            }
        },
        "/getTags": {
            "get": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Returns a list of every tag in the database.",
                "operationId": "petIdGet",
                "responses": {
                    "200": {
                        "description": "Sends the list of every tag in the database."
                    }
                }
            }
        },
        "/getTagByName": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Returns a list of songs inside of a tag.",
                "description": "Input the name of the tag/station you are looking for to recieve the tag Data.",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Name of tag to get.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "operationId": "petIdGet",
                "responses": {
                    "200": {
                        "description": "Sends tag by name."
                    }
                }
            }
        },
        "/getTagsByGroup": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Returns a list of tags by group.",
                "description": "Input the group of the tag/station you are looking for to recieve the tag Data. Tags generated will default to 'genre'. Other viable groups: 'location', 'school'(Not implemented yet)",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Name of group to get.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "operationId": "petIdGet",
                "responses": {
                    "200": {
                        "description": "Sends tag by group."
                    }
                }
            }
        },
        "/tempUploadSong": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Uploads a song.",
                "description": "Should not be attempted through swagger ui. In order to upload a song you need to add the headers below. The body should be multipart data of the song",
                "parameters": [
                    {
                        "in": "Headers",
                        "name": "SongUploadHeaders",
                        "description": "The Song Headers that goes along with multipart data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SongUploadHeaders"
                        }
                    }
                ],
                "operationId": "petIdGet",
                "responses": {
                    "200": {
                        "description": "Song has been uploaded"
                    }
                }
            }
        },
        "/authenticate": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "Logs a user in",
                "description": "The Authenticate route takes in a body object with a username and password parameter. It returns an Authentication Token in the form of a string upon a successful request. In order to access /api/ calls, headers must contain an Authorization property with the token string and 'Bearer ' prepended to it.",
                "operationId": "petIdGet",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "username",
                        "description": "Username of the account attempting to log in",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "password",
                        "description": "Password of the account attempting to log in",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/getSongById": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Default"
                ],
                "summary": "returns Song Data by Id",
                "description": "send the Id to get song Data.",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "id",
                        "description": "Id of song trying to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/getUser": {
            "get": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Protected"
                ],
                "summary": "Retrieves basic user data",
                "description": "Takes in a request with to return basic User Data. In order to use this route, use /authenticate to get a token. Then paste that token into the api_key box in the upper right corner. Put 'Bearer ' before the token. Do not use quotations.",
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/getTagByName": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Protected"
                ],
                "summary": "Returns tag data with songs",
                "description": "Returns tag list with songs. It also returns a new Authentication token that should be updated.",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Name of tag to get.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "operationId": "tagIdGet",
                "responses": {
                    "200": {
                        "description": "Sends tag by name."
                    }
                }
            }
        },
        "/api/upvoteSong": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Protected"
                ],
                "summary": "Upvotes a Song.",
                "description": "Adds one to the upvotes parameter of a song. The song will add one to its respective tag category. The Users authentication token dictates which category the upvote goes into.Adds the user onto the rated list. Adds the song to the users upvote list",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Name of song to upvote.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "operationId": "songUpvote",
                "responses": {
                    "200": {
                        "description": "Song has been upvoted."
                    }
                }
            }
        },
        "/api/downvoteSong": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Protected"
                ],
                "summary": "Downvotes a Song.",
                "description": "Adds one to the downvote parameter of a song. The song will add one to its respective tag category. The Users authentication token dictates which category the downvote goes into. Adds the user onto the rated list. Adds the song to the users downvote list.",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Name of song to downvote.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "operationId": "downvote",
                "responses": {
                    "200": {
                        "description": "Song has been downvoted."
                    }
                }
            }
        },
        "/api/uploadSong": {
            "post": {
                "x-swagger-router-controller": "Default",
                "tags": [
                    "Protected"
                ],
                "summary": "Uploads a song.",
                "description": "Should not be attempted through swagger ui. In order to upload a song you need to add the headers below. The body should be multipart data of the song",
                "parameters": [
                    {
                        "in": "Headers",
                        "name": "SongUploadHeaders",
                        "description": "The Song Headers that goes along with multipart data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SongUploadHeaders"
                        }
                    }
                ],
                "operationId": "petIdGet",
                "responses": {
                    "200": {
                        "description": "Song has been uploaded"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "SongUploadHeaders": {
            "properties": {
                "songname": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "tagarray": {
                    "type": "string"
                },
                "filepath": {
                    "type": "string"
                }
            }
        }
    }
}